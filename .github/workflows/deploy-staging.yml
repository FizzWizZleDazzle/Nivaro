name: Deploy to Staging

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  
jobs:
  deploy-frontend-staging:
    name: Deploy Frontend to Cloudflare Workers (Next.js)
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd app
        npm install --legacy-peer-deps

    - name: Build Next.js for Cloudflare Workers
      run: |
        cd app
        npx @cloudflare/next-on-pages@latest build
      env:
        NEXT_PUBLIC_API_URL: https://nivaroapi.fizzwizzledazzle.dev
        NEXT_PUBLIC_ENVIRONMENT: staging

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        workingDirectory: app
        command: deploy

  deploy-backend-staging:
    name: Deploy Backend to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
        
    - name: Install worker-build
      run: cargo install worker-build --locked --force
      
    - name: Build backend
      run: |
        cd backend
        worker-build --release
        
    - name: Deploy to Cloudflare Workers (Staging)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        workingDirectory: backend
        command: deploy --env staging